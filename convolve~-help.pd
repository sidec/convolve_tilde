#N canvas 256 136 1030 663 10;
#N canvas 641 50 679 463 init 0;
#X obj 246 318 soundfiler;
#X msg 357 133 \; \$1-dry-volume-set 0 \; \$1-wet-volume-set 0 \; \$1-master-volume-set
0 \;;
#X obj 357 113 f \$0;
#X obj 407 38 f \$0;
#X obj 46 58 loadbang;
#X obj 23 79 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X obj 46 190 s \$0-lb4;
#X obj 46 79 t b b b b;
#X obj 136 130 s \$0-lb1;
#X obj 106 150 s \$0-lb2;
#X obj 76 170 s \$0-lb3;
#X obj 246 27 r \$0-lb2;
#X msg 246 208 read -resize ./audio/ir-large-chamber.wav \$1-largeChamber
;
#X msg 286 228 read -resize ./audio/ir-tunnel.wav \$1-tunnel;
#X msg 326 248 read -resize ./audio/ir-tam.wav \$1-tamTam;
#X msg 366 268 read -resize ./audio/ir-cym.wav \$1-cymbal;
#X obj 246 159 f \$0;
#X obj 246 180 t f f f f;
#X obj 246 48 t b b b;
#X msg 407 58 \; \$1-24-band-eq const 1 \;;
#X obj 31 277 r \$0-lb3;
#X obj 31 302 f \$0;
#X msg 31 323 \; \$1-bin-scalars resize 93157 \; \$1-bin-scalars const
1 \;;
#X text 29 376 Here \, the default IR array given as a creation argument
is \$0-tunnel \, so for the EQ interface to work we need to resize
the bin scalar array to the length of the tunnel IR signal divided
by 2 plus 1;
#X connect 2 0 1 0;
#X connect 3 0 19 0;
#X connect 4 0 7 0;
#X connect 5 0 7 0;
#X connect 7 0 6 0;
#X connect 7 1 10 0;
#X connect 7 2 9 0;
#X connect 7 3 8 0;
#X connect 11 0 18 0;
#X connect 12 0 0 0;
#X connect 13 0 0 0;
#X connect 14 0 0 0;
#X connect 15 0 0 0;
#X connect 16 0 17 0;
#X connect 17 0 12 0;
#X connect 17 1 13 0;
#X connect 17 2 14 0;
#X connect 17 3 15 0;
#X connect 18 0 16 0;
#X connect 18 1 2 0;
#X connect 18 2 3 0;
#X connect 20 0 21 0;
#X connect 21 0 22 0;
#X restore 301 90 pd init;
#X floatatom 361 348 5 0 0 0 - #0-master-volume -, f 5;
#X obj 110 91 readsf~;
#X msg 132 62 stop;
#X obj 34 55 *~;
#X obj 34 126 +~;
#X obj 64 55 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0 1
;
#X obj 158 246 env~;
#X floatatom 158 267 5 0 0 1 dB - -, f 5;
#X obj 224 348 hsl 128 15 0 100 0 0 \$0-master-volume \$0-master-volume-set
master-volume 8 8 0 12 -228856 -1 -1 9400 1;
#X obj 481 37 cnv 15 400 220 empty empty empty 20 12 0 14 -233017 -66577
0;
#X obj 481 352 cnv 15 220 220 empty empty empty 20 12 0 14 -233017
-66577 0;
#X text 490 360 Try these different IRs;
#X floatatom 361 328 5 0 0 0 - #0-wet-volume -, f 5;
#X obj 224 328 hsl 128 15 0 100 0 0 \$0-wet-volume \$0-wet-volume-set
wet-volume 8 8 0 12 -228856 -1 -1 12700 1;
#X floatatom 361 308 5 0 0 0 - #0-dry-volume -, f 5;
#X obj 224 308 hsl 128 15 0 100 0 0 \$0-dry-volume \$0-dry-volume-set
dry-volume 8 8 0 12 -228856 -1 -1 0 1;
#N canvas 190 207 521 438 mix-dry-and-wet 0;
#X obj 46 24 inlet~;
#X obj 46 364 outlet~;
#X obj 46 289 *~;
#X obj 346 247 dbtorms;
#X obj 346 289 line~;
#X obj 346 268 pack f 40;
#X obj 46 159 *~;
#X obj 96 117 dbtorms;
#X obj 96 159 line~;
#X obj 96 138 pack f 40;
#X obj 46 230 +~;
#X obj 236 24 inlet~;
#X obj 236 159 *~;
#X obj 286 117 dbtorms;
#X obj 286 159 line~;
#X obj 286 138 pack f 40;
#X obj 96 96 r \$0-dry-volume;
#X obj 286 96 r \$0-wet-volume;
#X obj 346 226 r \$0-master-volume;
#X connect 0 0 6 0;
#X connect 2 0 1 0;
#X connect 3 0 5 0;
#X connect 4 0 2 1;
#X connect 5 0 4 0;
#X connect 6 0 10 0;
#X connect 7 0 9 0;
#X connect 8 0 6 1;
#X connect 9 0 8 0;
#X connect 10 0 2 0;
#X connect 11 0 12 0;
#X connect 12 0 10 1;
#X connect 13 0 15 0;
#X connect 14 0 12 1;
#X connect 15 0 14 0;
#X connect 16 0 7 0;
#X connect 17 0 13 0;
#X connect 18 0 3 0;
#X restore 34 302 pd mix-dry-and-wet;
#N canvas 0 23 487 359 cpu-meter 0;
#X floatatom 103 122 5 0 0 1 % - -, f 5;
#X obj 272 158 cputime;
#X obj 272 102 metro 1000;
#X msg 272 66 1;
#X obj 272 130 t b b;
#X obj 272 218 * 0.1;
#X obj 272 187 int;
#X obj 272 38 r \$0-lb1;
#X connect 1 0 6 0;
#X connect 2 0 4 0;
#X connect 3 0 2 0;
#X connect 4 0 1 0;
#X connect 4 1 1 1;
#X connect 5 0 0 0;
#X connect 6 0 5 0;
#X connect 7 0 3 0;
#X coords 0 -1 1 1 85 40 1 100 100;
#X restore 731 280 pd cpu-meter;
#X obj 159 158 r \$0-convolve;
#X obj 513 548 s \$0-convolve;
#X text 834 624 William Brent \, March 2018;
#X obj 4 4 cnv 10 400 10 empty empty empty 20 12 0 14 -233017 -66577
0;
#X obj 4 4 cnv 10 10 400 empty empty empty 20 12 0 14 -233017 -66577
0;
#X obj 731 352 cnv 15 220 220 empty empty empty 20 12 0 14 -233017
-66577 0;
#X obj 753 539 s \$0-convolve;
#X msg 793 503 window 64;
#X msg 773 473 window 1920;
#N canvas 740 104 913 453 partitioned-convolution-explained 0;
#X text 38 177 This is the standard frequency domain method \, which
is much faster than performing convolution in the time domain. In either
case \, the result is that a scaled and time shifted copy of one file
takes the place of every single sample in the other. So \, if you have
an impulse response (IR) of a room - that is \, a burst of noise followed
by the natural echos the room produces - you can graft that pattern
of echos onto every single sample in your input file.;
#X text 38 297 With real-time input \, the situation becomes more complicated.
We can have an IR prepared in advance \, but the other sound source
only shows up bit by bit. Typically \, it will arrive in chunks of
64 \, 128 \, 256 \, or some other number of samples. Partitioned convolution
solves this problem by breaking up the IR into some number of partitions
that is each M samples long. M should be the same size as the chunks
of input that arrive in real time. Then \, each of the partitions is
Fourier transformed and stored as frequency domain data.;
#X text 488 247 The last point to make is that the size of the Fourier
transform must be M*2. That is \, when we get the latest M samples
\, we pad it out with zeros to M*2 samples \, then transform it. All
of the IR partitions are padded to this same size. When any one chunk
is inverse Fourier transformed \, its main content will be over the
first M samples \, trailed by low amplitude samples or zeros. A process
of overlapping and adding is then performed so that the first M samples
of the most recently processed M*2 samples is mixed down with the last
M samples of the previous chunk of processed M*2 samples.;
#X text 488 27 When each new input chunk arrives (the M most recent
samples) \, it is Fourier transformed into complex frequency domain
data. The new chunk of frequency domain data is multiplied against
each of the pre-prepared IR partitions that are also in the frequency
domain. We can immediately do an inverse Fourier transform on the most
recently available chunk to hear that portion of the processed input
in the time domain \, but the other chunks will wait in a buffer to
be output in the future. The crucial point to understand is that as
new input chunks come in and are transformed and multiplied in the
frequency domain \, we sum that new data with whatever other frequency
domain data was waiting in that part of the buffer. Thus \, we save
numerous FFT calls by summing in the frequency domain.;
#X text 38 27 With two pre-recorded sound files \, convolution is pretty
simple. We determine which file is longer \, find the next highest
power of 2 (we'll call it N) \, and then pad each of the files with
addiontal zeros up to N. Next \, we do a forward Fourier transform
on each of them \, and multiply the transformed data sets point by
point. Because the data contain complex values \, we must do a complex
multiply vis FOIL. After multiplication \, all that is left to do is
an inverse Fourier transform on the frequency domain product. Depending
on the specific FFT algorithm being used \, you may also have to scale
the amplitude by the reciprocal of N.;
#X restore 481 267 pd partitioned-convolution-explained;
#X text 218 364 ** Beware of hot output!! **;
#X text 728 326 Small partition sizes are expensive, f 36;
#N canvas 196 114 478 412 24-band-gain-scalars 0;
#N canvas 756 370 594 333 write-bands-to-scalar-array 0;
#X obj 29 159 list prepend eq;
#X obj 29 180 list trim;
#X obj 29 201 s \$0-convolve;
#N canvas 698 262 459 234 load-bark-bounds 0;
#X obj 28 54 f \$0;
#X msg 28 75 \; \$1-bark-bounds 0 0 100.464 203.724 312.657 430.295
559.913 705.121 869.96 1059.02 1277.57 1531.68 1828.45 2176.12 2584.37
3064.59 3630.12 4296.73 5082.97 6010.73 7105.83 8398.79 9925.58 11728.7
13858.4 22050 \; \$1-bark-bounds bounds 0 22050 24 0 \;;
#X obj 28 33 r \$0-lb1;
#X connect 0 0 1 0;
#X connect 2 0 0 0;
#X restore 228 128 pd load-bark-bounds;
#X obj 228 148 table \$0-bark-bounds 25;
#X obj 451 178 metro 100;
#X obj 451 199 s \$0-update-eq;
#X obj 451 136 r \$0-lb4;
#X obj 29 138 array get \$0-bin-scalars;
#X text 30 244 Here \, we dump the bin-scalar values out of the table
and send them to [convolve~] as an "eq" message. Since working in linear
frequency bins isn't very intuitive \, we'll use the Bark frequency
scale to define 24 frequency bands and have each of the values in the
24-band-eq table control a whole range of bin scalars. The bandEqWriter.pd
abstraction does this job., f 81;
#X msg 228 65 vis \$2 \$1;
#X obj 228 23 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X obj 228 45 pack f f;
#X floatatom 278 23 5 0 23 0 - - -, f 5;
#X obj 29 62 r \$0-send-eq-list;
#X obj 29 83 delay 500;
#X obj 228 88 clone ./lib/bandEqWriter 24 \$0 44100 186312;
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X connect 5 0 6 0;
#X connect 7 0 5 0;
#X connect 8 0 0 0;
#X connect 10 0 16 0;
#X connect 11 0 12 0;
#X connect 12 0 10 0;
#X connect 13 0 12 1;
#X connect 14 0 15 0;
#X connect 15 0 8 0;
#X restore 41 159 pd write-bands-to-scalar-array;
#N canvas 548 198 721 545 eq-table-resizing 0;
#X obj 308 219 t b f;
#X obj 308 31 r \$0-convolve;
#X obj 137 78 inlet;
#X obj 58 194 inlet;
#X msg 58 359 \; \$1-24-band-eq const 0 \;;
#X obj 58 339 f \$0;
#X msg 137 293 \; \$1-24-band-eq const 1 \;;
#X obj 137 273 f \$0;
#X obj 308 52 route analyze;
#X obj 308 103 array size;
#X obj 308 73 t b a;
#X obj 365 73 symbol;
#X obj 308 154 / 2;
#X obj 308 175 i;
#X obj 308 196 + 1;
#X obj 308 124 t f f;
#X msg 364 321 \; \$3-bin-scalars resize \$1 \; \$3-bin-scalars const
1 \; \$3-IR-numSamps \$2 \;;
#X obj 364 300 pack f f \$0;
#X text 378 140 When a new IR is analyzed \, the size of the bin-scalars
array needs to change too. The analysis window size for the EQ's FFT
filtering is the length of the entire IR signal array. That means we
need half that plus 1 to refer to FFT bins 0 through Nyquist., f 49
;
#X text 310 396 Internally \, [convolve~]'s bin scalars are set back
to 1 on every new IR analysis \, so we should reset the bin-scalars
array and the 24-band-eq array to 1 as well., f 50;
#X connect 0 0 7 0;
#X connect 0 1 17 0;
#X connect 1 0 8 0;
#X connect 2 0 7 0;
#X connect 3 0 5 0;
#X connect 5 0 4 0;
#X connect 7 0 6 0;
#X connect 8 0 10 0;
#X connect 9 0 15 0;
#X connect 10 0 9 0;
#X connect 10 1 11 0;
#X connect 11 0 9 1;
#X connect 12 0 13 0;
#X connect 13 0 14 0;
#X connect 14 0 0 0;
#X connect 15 0 12 0;
#X connect 15 1 17 1;
#X connect 17 0 16 0;
#X restore 279 139 pd eq-table-resizing;
#X obj 345 17 bng 15 250 50 0 empty empty unity 17 7 0 12 -262144 -1
-1;
#X obj 275 17 bng 15 250 50 0 empty empty mute 17 7 0 12 -262144 -1
-1;
#N canvas 0 22 450 278 (subpatch) 0;
#X array \$0-24-band-eq 24 float 2;
#X coords 0 1.25 24 0 355 64 1 0 0;
#X restore 42 54 graph;
#X text 39 358 Note that scalar values below 0 are clipped to 0 \,
but there is no upper limit for scalars., f 67;
#X obj 279 159 table \$0-bin-scalars;
#X text 39 189 As of version 0.11 \, you can scale the complex frequency-domain
values of the IR analysis via an "eq" message. This allows you to boost
or attenuate energy in any frequency bin. The "eq" method expects a
list of bin scalar values that is one larger than half the number of
samples in your IR signal array. Since that's usually thousands of
numbers \, it's best to store the bin scalars in a table and dump the
data into a list using [array get]., f 67;
#X text 39 279 Here \, things are a bit complicated to make a more
user-friendly interface. The 24-band-eq array above is used to control
the bin scalars for all bins within each of 24 bands according to the
Bark scale. It automatically changes as you load different IRs. See
inside the [pd write-bands-to-scalar-array] subpatch for more details.
, f 67;
#X connect 2 0 1 1;
#X connect 3 0 1 0;
#X coords 0 -1 1 1 380 120 1 30 10;
#X restore 34 452 pd 24-band-gain-scalars;
#X msg 110 40 open ../doc/sound/voice.wav \, start;
#X obj 301 224 cnv 15 150 60 empty empty empty 20 12 0 14 -233017 -66577
0;
#X text 310 232 Other messages;
#N canvas 550 54 468 228 other-messages 0;
#X obj 54 158 s \$0-convolve;
#X msg 54 62 flush;
#X msg 74 112 print;
#X text 136 111 Print internal settings to the post window;
#X text 116 61 Flush all internal buffer contents;
#X connect 1 0 0 0;
#X connect 2 0 0 0;
#X restore 312 256 pd other-messages;
#X text 740 360 Change window/partition size (and therefore delay)
in samples. Window sizes do not need to be powers of two \, but they
must be multiples of Pd's default block size (64)., f 31;
#X text 478 578 It's ok to analyze different IRs and change window
size on the fly \, although audio will be interrupted., f 35;
#X obj 493 383 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 513 383 f \$0;
#X msg 513 403 analyze \$1-largeChamber;
#X msg 513 443 analyze \$1-tunnel;
#X msg 513 483 analyze \$1-tamTam;
#X msg 513 523 analyze \$1-cymbal;
#X obj 301 111 table \$0-largeChamber;
#X obj 301 153 table \$0-tamTam;
#X obj 301 174 table \$0-cymbal;
#X obj 493 423 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 513 423 f \$0;
#X obj 493 463 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 513 463 f \$0;
#X obj 493 503 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 513 503 f \$0;
#X msg 753 443 window 320;
#X text 834 604 [convolve~] version 0.11;
#X obj 34 351 dac~;
#X obj 34 34 adc~;
#X obj 139 208 convolve~ 640 \$0-tunnel;
#X text 32 577 While the "eq" message itself is simple \, this implementation
of a 24-band EQ table that generates an "eq" message is a bit involved.
Investigate the subpatch for more info.;
#X text 490 51 [convolve~] is a partitioned impulse response (IR) convolution
object. The 1st creation argument is the partition size \, which also
determines the amount of delay between the dry and wet signal (i.e.
\, pre-delay). Partition size must be a multiple of Pd's default block
size: 64 samples (1.4512ms @ 44100Hz).;
#X text 490 131 Optionally \, you can also supply the symbolic name
of an array holding an IR as the 2nd creation argument so that you
can begin use immediately at startup. Otherwise \, you must send [convolve~]
an "analyze" message specifying the name of the table where your IR
is stored.;
#X text 490 201 Try playing the example voice.wav \, or listen to live
input (with headphones to prevent feedback). No gain adjustments are
made based on the IR in use \, so you'll have to find the right volume
attenuation for your particular IR.;
#X obj 301 132 table \$0-tunnel;
#X text 32 400 Version 0.11 has a new "eq" method. Use the 24-band
EQ table below \, which generates appropriate "eq" messages. Messages
are sent a half second after you stop changing values in the table.
, f 62;
#X connect 2 0 5 1;
#X connect 3 0 2 0;
#X connect 4 0 5 0;
#X connect 5 0 17 0;
#X connect 5 0 57 0;
#X connect 6 0 4 1;
#X connect 7 0 8 0;
#X connect 17 0 55 0;
#X connect 17 0 55 1;
#X connect 19 0 57 0;
#X connect 26 0 25 0;
#X connect 27 0 25 0;
#X connect 32 0 2 0;
#X connect 38 0 39 0;
#X connect 39 0 40 0;
#X connect 40 0 20 0;
#X connect 41 0 20 0;
#X connect 42 0 20 0;
#X connect 43 0 20 0;
#X connect 47 0 48 0;
#X connect 48 0 41 0;
#X connect 49 0 50 0;
#X connect 50 0 42 0;
#X connect 51 0 52 0;
#X connect 52 0 43 0;
#X connect 53 0 25 0;
#X connect 56 0 4 0;
#X connect 57 0 7 0;
#X connect 57 0 17 1;
